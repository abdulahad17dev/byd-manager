package com.byd.vehiclecontrol;

import android.util.Log;

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ–∫–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
public class WindowTestAPI {
    private static final String TAG = "WindowTestAPI";

    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private static final int WINDOW_SYSTEM = 1001;
    private static final int WINDOW_EVENT = 1125122107;
    private static final int WINDOW_OPEN = 1;
    private static final int WINDOW_CLOSE = 0;

    private Object autoManager;

    public WindowTestAPI(Object autoManager) {
        this.autoManager = autoManager;
        Log.d(TAG, "WindowTestAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞");
        Log.d(TAG, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: system=" + WINDOW_SYSTEM + ", event=" + WINDOW_EVENT);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    public boolean openWindow() {
        return setWindowState(WINDOW_OPEN);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    public boolean closeWindow() {
        return setWindowState(WINDOW_CLOSE);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
     */
    private boolean setWindowState(int state) {
        try {
            Log.d(TAG, String.format("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞: setInt(%d, %d, %d)",
                    WINDOW_SYSTEM, WINDOW_EVENT, state));

            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ setInt
            java.lang.reflect.Method setIntMethod = autoManager.getClass()
                    .getMethod("setInt", int.class, int.class, int.class);

            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
            Object result = setIntMethod.invoke(autoManager, WINDOW_SYSTEM, WINDOW_EVENT, state);

            Log.d(TAG, "‚úÖ setInt –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + result);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
            Thread.sleep(500);
            int currentState = getWindowState();

            if (currentState == state) {
                Log.d(TAG, "üéØ –£–°–ü–ï–•! –û–∫–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + state);
                return true;
            } else {
                Log.w(TAG, "‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –û–∂–∏–¥–∞–ª–∏: " + state + ", –ø–æ–ª—É—á–∏–ª–∏: " + currentState);
                return false;
            }

        } catch (Exception e) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º: " + Log.getStackTraceString(e));
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
     */
    public int getWindowState() {
        try {
            Log.d(TAG, String.format("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞: getInt(%d, %d)",
                    WINDOW_SYSTEM, WINDOW_EVENT));

            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ getInt
            java.lang.reflect.Method getIntMethod = autoManager.getClass()
                    .getMethod("getInt", int.class, int.class);

            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
            Object result = getIntMethod.invoke(autoManager, WINDOW_SYSTEM, WINDOW_EVENT);

            int state = (Integer) result;
            Log.d(TAG, "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞: " + state);
            return state;

        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞: " + Log.getStackTraceString(e));
            return -1;
        }
    }

    /**
     * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞
     */
    public void runFullWindowTest() {
        Log.d(TAG, "üöó === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –û–ö–ù–ê ===");

        try {
            // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            Log.d(TAG, "–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
            int initialState = getWindowState();
            Log.d(TAG, "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞: " + initialState);

            Thread.sleep(1000);

            // –®–∞–≥ 2: –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
            Log.d(TAG, "–®–∞–≥ 2: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ");
            boolean openResult = openWindow();
            Log.d(TAG, "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è: " + (openResult ? "–£–°–ü–ï–•" : "–ù–ï–£–î–ê–ß–ê"));

            Thread.sleep(2000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

            // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
            Log.d(TAG, "–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è");
            int openState = getWindowState();
            Log.d(TAG, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è: " + openState);

            Thread.sleep(1000);

            // –®–∞–≥ 4: –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
            Log.d(TAG, "–®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ");
            boolean closeResult = closeWindow();
            Log.d(TAG, "–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è: " + (closeResult ? "–£–°–ü–ï–•" : "–ù–ï–£–î–ê–ß–ê"));

            Thread.sleep(2000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

            // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            Log.d(TAG, "–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
            int finalState = getWindowState();
            Log.d(TAG, "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + finalState);

            // –®–∞–≥ 6: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            Log.d(TAG, "–®–∞–≥ 6: –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ");
            if (initialState != finalState) {
                setWindowState(initialState);
                Log.d(TAG, "–û–∫–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + initialState);
            }

            // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            Log.d(TAG, "üèÅ === –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–£ –û–ö–ù–ê ===");
            Log.d(TAG, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: system=" + WINDOW_SYSTEM + ", event=" + WINDOW_EVENT);
            Log.d(TAG, "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + initialState);
            Log.d(TAG, "–û—Ç–∫—Ä—ã—Ç–∏–µ: " + (openResult ? "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" : "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"));
            Log.d(TAG, "–ó–∞–∫—Ä—ã—Ç–∏–µ: " + (closeResult ? "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" : "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"));
            Log.d(TAG, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: " + initialState + " ‚Üí " + openState + " ‚Üí " + finalState);

            if (openResult || closeResult) {
                Log.d(TAG, "üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            } else {
                Log.d(TAG, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
            }

        } catch (Exception e) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: " + Log.getStackTraceString(e));
        }

        Log.d(TAG, "=== –¢–ï–°–¢ –û–ö–ù–ê –ó–ê–í–ï–†–®–ï–ù ===");
    }

    /**
     * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - —Ç–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
     */
    public void quickOpenTest() {
        Log.d(TAG, "üî• –ë–´–°–¢–†–´–ô –¢–ï–°–¢: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ");
        Log.d(TAG, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: setInt(" + WINDOW_SYSTEM + ", " + WINDOW_EVENT + ", " + WINDOW_OPEN + ")");

        openWindow();
    }
}