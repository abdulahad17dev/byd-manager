package com.byd.vehiclecontrol;

import android.util.Log;

/**
 * API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º —á–µ—Ä–µ–∑ BYDAutoManager
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
public class VehicleControlAPI {
    private static final String TAG = "VehicleControlAPI";

    public Object autoManager;

    public VehicleControlAPI(Object autoManager) {
        this.autoManager = autoManager;
        Log.d(TAG, "VehicleControlAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å: " + autoManager.getClass().getName());
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     */
    public boolean setInt(int deviceType, int eventType, int value) {
        try {
            Log.d(TAG, String.format("setInt(%d, %d, %d)", deviceType, eventType, value));

            java.lang.reflect.Method setIntMethod = autoManager.getClass()
                    .getMethod("setInt", int.class, int.class, int.class);

            Object result = setIntMethod.invoke(autoManager, deviceType, eventType, value);

            Log.d(TAG, "setInt —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + result);
            return true;

        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ setInt: " + Log.getStackTraceString(e));
            return false;
        }
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     */
    public int getInt(int deviceType, int eventType) {
        try {
            Log.d(TAG, String.format("getInt(%d, %d)", deviceType, eventType));

            java.lang.reflect.Method getIntMethod = autoManager.getClass()
                    .getMethod("getInt", int.class, int.class);

            Object result = getIntMethod.invoke(autoManager, deviceType, eventType);

            int value = (Integer) result;
            Log.d(TAG, "getInt —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + value);
            return value;

        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ getInt: " + Log.getStackTraceString(e));
            return -1;
        }
    }

    // ===== –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ö–ù–ê–ú–ò =====

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param window 1=–ø–µ—Ä–µ–¥–Ω–∏–µ, 2=–∑–∞–¥–Ω–∏–µ, 3=–ª–µ–≤—ã–µ, 4=–ø—Ä–∞–≤—ã–µ
     * @param action 0=–∑–∞–∫—Ä—ã—Ç—å, 1=–æ—Ç–∫—Ä—ã—Ç—å, 2=—Å—Ç–æ–ø
     */
    public boolean controlWindow(int window, int action) {
        Log.d(TAG, String.format("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º %d, –¥–µ–π—Å—Ç–≤–∏–µ %d", window, action));

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–∫–æ–Ω
        int[] windowDeviceTypes = {1, 2, 10, 20, 100}; // –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ–∫–æ–Ω
        int[] windowEventTypes = {1, 2, 3, 10, 11, 12}; // –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π

        for (int deviceType : windowDeviceTypes) {
            for (int eventType : windowEventTypes) {
                try {
                    if (setInt(deviceType + window, eventType, action)) {
                        Log.d(TAG, String.format("‚úÖ –û–∫–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ deviceType=%d, eventType=%d",
                                deviceType + window, eventType));
                        return true;
                    }
                } catch (Exception e) {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                }
            }
        }

        Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º");
        return false;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ –æ–∫–Ω–æ
     */
    public boolean openFrontLeftWindow() {
        return controlWindow(1, 1);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ –æ–∫–Ω–æ
     */
    public boolean closeFrontLeftWindow() {
        return controlWindow(1, 0);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞
     */
    public boolean openAllWindows() {
        boolean success = true;
        success &= controlWindow(1, 1); // –ü–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ
        success &= controlWindow(2, 1); // –ü–µ—Ä–µ–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ
        success &= controlWindow(3, 1); // –ó–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ
        success &= controlWindow(4, 1); // –ó–∞–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ
        return success;
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞
     */
    public boolean closeAllWindows() {
        boolean success = true;
        success &= controlWindow(1, 0); // –ü–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ
        success &= controlWindow(2, 0); // –ü–µ—Ä–µ–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ
        success &= controlWindow(3, 0); // –ó–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ
        success &= controlWindow(4, 0); // –ó–∞–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ
        return success;
    }

    // ===== –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–í–ï–†–¨–ú–ò =====

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å–º–∏
     * @param door 1=–ø–µ—Ä–µ–¥–Ω—è—è –ª–µ–≤–∞—è, 2=–ø–µ—Ä–µ–¥–Ω—è—è –ø—Ä–∞–≤–∞—è, 3=–∑–∞–¥–Ω—è—è –ª–µ–≤–∞—è, 4=–∑–∞–¥–Ω—è—è –ø—Ä–∞–≤–∞—è, 5=–±–∞–≥–∞–∂–Ω–∏–∫
     * @param action 0=–∑–∞–∫—Ä—ã—Ç—å/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, 1=–æ—Ç–∫—Ä—ã—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
     */
    public boolean controlDoor(int door, int action) {
        Log.d(TAG, String.format("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å—é %d, –¥–µ–π—Å—Ç–≤–∏–µ %d", door, action));

        // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–≤–µ—Ä–µ–π
        int[] doorDeviceTypes = {5, 6, 50, 60, 200};
        int[] doorEventTypes = {1, 2, 5, 6, 20, 21};

        for (int deviceType : doorDeviceTypes) {
            for (int eventType : doorEventTypes) {
                try {
                    if (setInt(deviceType + door, eventType, action)) {
                        Log.d(TAG, String.format("‚úÖ –î–≤–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ deviceType=%d, eventType=%d",
                                deviceType + door, eventType));
                        return true;
                    }
                } catch (Exception e) {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                }
            }
        }

        return false;
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–≤–µ—Ä–∏
     */
    public boolean unlockAllDoors() {
        boolean success = true;
        for (int door = 1; door <= 5; door++) {
            success &= controlDoor(door, 1);
        }
        return success;
    }

    /**
     * –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–≤–µ—Ä–∏
     */
    public boolean lockAllDoors() {
        boolean success = true;
        for (int door = 1; door <= 5; door++) {
            success &= controlDoor(door, 0);
        }
        return success;
    }

    // ===== –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í =====

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    public void discoverVehicleFunctions() {
        Log.d(TAG, "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è...");

        // –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        int[] deviceTypes = {1, 2, 3, 4, 5, 10, 20, 50, 100, 200};
        int[] eventTypes = {1, 2, 3, 4, 5, 10, 11, 12, 20, 21, 22};
        int[] testValues = {0, 1};

        int foundCount = 0;

        for (int deviceType : deviceTypes) {
            for (int eventType : eventTypes) {
                for (int testValue : testValues) {
                    try {
                        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        int currentValue = getInt(deviceType, eventType);

                        // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        if (setInt(deviceType, eventType, testValue)) {

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                            int newValue = getInt(deviceType, eventType);

                            if (newValue != currentValue) {
                                Log.d(TAG, String.format("üéØ –ù–ê–ô–î–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: deviceType=%d, eventType=%d " +
                                                "(–±—ã–ª–æ: %d, —Å—Ç–∞–ª–æ: %d)",
                                        deviceType, eventType, currentValue, newValue));
                                foundCount++;

                                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å
                                setInt(deviceType, eventType, currentValue);
                            }
                        }

                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
                        Thread.sleep(10);

                    } catch (Exception e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
                    }
                }
            }
        }

        Log.d(TAG, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ " + foundCount + " –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.");
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
     */
    public void testFunction(int deviceType, int eventType, String functionName) {
        Log.d(TAG, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: " + functionName);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            int currentValue = getInt(deviceType, eventType);
            Log.d(TAG, String.format("%s - —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", functionName, currentValue));

            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å
            boolean success1 = setInt(deviceType, eventType, currentValue == 0 ? 1 : 0);
            Thread.sleep(100);
            int newValue1 = getInt(deviceType, eventType);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            boolean success2 = setInt(deviceType, eventType, currentValue);
            Thread.sleep(100);
            int newValue2 = getInt(deviceType, eventType);

            Log.d(TAG, String.format("%s - —Ç–µ—Å—Ç: %d ‚Üí %d ‚Üí %d (—É—Å–ø–µ—Ö: %s/%s)",
                    functionName, currentValue, newValue1, newValue2, success1, success2));

        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è " + functionName + ": " + e.getMessage());
        }
    }
}